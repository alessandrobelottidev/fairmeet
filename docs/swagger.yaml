openapi: 3.0.0
info:
  title: Fairmeet API
  description: All the data needed to power the frontend
  version: 1.0.0
  contact:
    name: Marco Adami, Alessandro Belotti
servers:
  - url: http://localhost:3001
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /v1/events:
    get:
      tags:
        - Events | FEATURE
      summary: Get all upcoming events
      description: Retrieve a paginated list of all upcoming events, with options for
        sorting and selecting specific fields.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number for pagination (starting from 0).
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            maximum: 100
          description: Maximum number of items per page.
        - in: query
          name: sortBy
          schema:
            type: string
            default: startDateTimeZ
          description: Field by which to sort results.
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Order of sorting, either ascending (asc) or descending (desc).
        - in: query
          name: fields
          schema:
            type: string
          description: Comma-separated list of fields to retrieve.
      responses:
        "200":
          description: A paginated list of events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The event ID.
                        title:
                          type: string
                          description: Title of the event.
                        address:
                          type: string
                          description: Address where the event takes place.
                        description:
                          type: string
                          description: Detailed description of the event.
                        location:
                          type: object
                          properties:
                            type:
                              type: string
                              example: Point
                            coordinates:
                              type: array
                              items:
                                type: number
                              example:
                                - 12.4924
                                - 41.8902
                        startDateTimeZ:
                          type: string
                          format: date-time
                          description: Event start date and time.
                        endDateTimeZ:
                          type: string
                          format: date-time
                          description: Event end date and time.
                        formattedStartDate:
                          type: string
                          description: Formatted start date.
                        formattedEndDate:
                          type: string
                          description: Formatted end date.
                        abstract:
                          type: string
                          description: Brief description of the event.
                        email:
                          type: string
                          format: email
                          description: Contact email for the event.
                        socialMediaHandles:
                          type: object
                          description: Social media handles for the event.
                        featuredImageUrl:
                          type: string
                          description: URL of the featured image.
                        updated_at:
                          type: string
                          format: date-time
                          description: Last update timestamp.
                  pagination:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                      limit:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                      nextPage:
                        type: integer
                        nullable: true
                      prevPage:
                        type: integer
                        nullable: true
        "500":
          description: Internal server error.
    post:
      tags:
        - Events | FEATURE
      summary: Create a new event
      description: Add a new event to the database with detailed information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - startDateTimeZ
                - endDateTimeZ
                - location
              properties:
                title:
                  type: string
                  description: The event title.
                  example: Summer Music Festival
                address:
                  type: string
                  description: The event address.
                  example: Central Park, New York
                description:
                  type: string
                  description: Detailed description of the event.
                  example: Annual summer music festival featuring local and international artists.
                location:
                  type: object
                  properties:
                    type:
                      type: string
                      example: Point
                    coordinates:
                      type: array
                      items:
                        type: number
                      example:
                        - 12.4924
                        - 41.8902
                startDateTimeZ:
                  type: string
                  format: date-time
                  description: Event start date and time.
                  example: 2024-07-15T18:00:00Z
                endDateTimeZ:
                  type: string
                  format: date-time
                  description: Event end date and time.
                  example: 2024-07-15T23:00:00Z
                abstract:
                  type: string
                  description: Brief description of the event.
                  example: Annual summer music festival
                email:
                  type: string
                  format: email
                  description: Contact email for the event.
                  example: info@summerfest.com
                socialMediaHandles:
                  type: object
                  description: Social media handles for the event.
                  example:
                    facebook: facebook.com/summerfest
                    instagram: instagram.com/summerfest
                featuredImageUrl:
                  type: string
                  description: URL of the featured image.
                  example: https://example.com/images/summerfest.jpg
      responses:
        "201":
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: Unique identifier of the created event.
                  title:
                    type: string
                  address:
                    type: string
                  description:
                    type: string
                  location:
                    type: object
                    properties:
                      type:
                        type: string
                      coordinates:
                        type: array
                        items:
                          type: number
                  startDateTimeZ:
                    type: string
                    format: date-time
                  endDateTimeZ:
                    type: string
                    format: date-time
                  abstract:
                    type: string
                  email:
                    type: string
                    format: email
                  socialMediaHandles:
                    type: object
                  featuredImageUrl:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
        "400":
          description: Invalid request body.
        "500":
          description: Internal server error.
  "/v1/events/{id}":
    get:
      tags:
        - Events | FEATURE
      summary: Get event by ID
      description: Retrieve details of a specific event by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier for the event.
        - in: query
          name: fields
          schema:
            type: string
          description: Comma-separated list of fields to retrieve.
      responses:
        "200":
          description: Detailed information of the event.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  address:
                    type: string
                  description:
                    type: string
                  location:
                    type: object
                    properties:
                      type:
                        type: string
                      coordinates:
                        type: array
                        items:
                          type: number
                  startDateTimeZ:
                    type: string
                    format: date-time
                  endDateTimeZ:
                    type: string
                    format: date-time
                  formattedStartDate:
                    type: string
                  formattedEndDate:
                    type: string
                  abstract:
                    type: string
                  email:
                    type: string
                  socialMediaHandles:
                    type: object
                  featuredImageUrl:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
        "404":
          description: Event not found.
        "500":
          description: Internal server error.
    patch:
      tags:
        - Events | FEATURE
      summary: Update an event by ID
      description: Modify one or more fields of a specific event.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the event to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                address:
                  type: string
                description:
                  type: string
                location:
                  type: object
                  properties:
                    type:
                      type: string
                    coordinates:
                      type: array
                      items:
                        type: number
                startDateTimeZ:
                  type: string
                  format: date-time
                endDateTimeZ:
                  type: string
                  format: date-time
                abstract:
                  type: string
      responses:
        "200":
          description: Successfully updated event
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  address:
                    type: string
                  description:
                    type: string
                  location:
                    type: object
                  startDateTimeZ:
                    type: string
                    format: date-time
                  endDateTimeZ:
                    type: string
                    format: date-time
                  abstract:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
        "400":
          description: Bad request or validation error
        "404":
          description: Event not found
        "500":
          description: Internal server error
    delete:
      tags:
        - Events | FEATURE
      summary: Delete an event by ID
      description: Remove a specific event from the database by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the event to delete.
      responses:
        "200":
          description: Successfully deleted the event
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  title:
                    type: string
                  address:
                    type: string
                  description:
                    type: string
                  location:
                    type: object
                  startDateTimeZ:
                    type: string
                    format: date-time
                  endDateTimeZ:
                    type: string
                    format: date-time
                  abstract:
                    type: string
        "404":
          description: Event not found
        "500":
          description: Internal server error
  /v1/spots:
    get:
      tags:
        - Spots | FEATURE
      summary: Get all spots
      description: Retrieve a paginated list of all spots, with options for sorting
        and selecting specific fields.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page number for pagination (starting from 0).
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            maximum: 100
          description: Maximum number of items per page.
        - in: query
          name: sortBy
          schema:
            type: string
            default: updated_at
          description: Field by which to sort results.
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Order of sorting, either ascending (asc) or descending (desc).
        - in: query
          name: fields
          schema:
            type: string
          description: Comma-separated list of fields to retrieve (e.g., "title,address").
      responses:
        "200":
          description: A paginated list of spots.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The spot ID.
                        title:
                          type: string
                          description: Title of the spot.
                        address:
                          type: string
                          description: Address of the spot.
                        latitude:
                          type: number
                          description: Latitude of the spot.
                        longitude:
                          type: number
                          description: Longitude of the spot.
                        updated_at:
                          type: string
                          format: date-time
                          description: Last update timestamp.
                  pagination:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                      limit:
                        type: integer
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                      nextPage:
                        type: integer
                        nullable: true
                      prevPage:
                        type: integer
                        nullable: true
        "500":
          description: Internal server error.
    post:
      tags:
        - Spots | FEATURE
      summary: Create a new spot
      description: Add a new spot to the database with detailed information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The spot title.
                  example: Sunny Beach
                address:
                  type: string
                  description: The spot address.
                  example: 456 Ocean Drive, Beachtown
                description:
                  type: string
                  description: Detailed description of the spot.
                  example: A popular beach with clear water and white sand.
                latitude:
                  type: number
                  description: Geographical latitude.
                  example: 36.778259
                longitude:
                  type: number
                  description: Geographical longitude.
                  example: -119.417931
                abstract:
                  type: string
                  description: Brief description of the spot.
                  example: Scenic beach.
                email:
                  type: string
                  format: email
                  description: Contact email for the spot.
                  example: info@sunnybeach.com
                socialMediaHandles:
                  type: object
                  description: Social media handles associated with the spot.
                  additionalProperties:
                    type: string
                  example:
                    facebook: facebook.com/sunnybeach
                    instagram: instagram.com/sunnybeach
                featuredImageUrl:
                  type: string
                  description: URL of the featured image.
                  example: https://example.com/images/sunnybeach.jpg
      responses:
        "201":
          description: Spot created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: Unique identifier of the created spot.
                    example: 609e128c81d3e2b1c4f43c56
                  title:
                    type: string
                    description: The spot title.
                    example: Sunny Beach
                  address:
                    type: string
                    description: The spot address.
                    example: 456 Ocean Drive, Beachtown
                  description:
                    type: string
                    description: Detailed description of the spot.
                    example: A popular beach with clear water and white sand.
                  latitude:
                    type: number
                    description: Geographical latitude.
                    example: 36.778259
                  longitude:
                    type: number
                    description: Geographical longitude.
                    example: -119.417931
                  abstract:
                    type: string
                    description: Brief description of the spot.
                    example: Scenic beach.
                  email:
                    type: string
                    format: email
                    description: Contact email for the spot.
                    example: info@sunnybeach.com
                  socialMediaHandles:
                    type: object
                    description: Social media handles associated with the spot.
                    additionalProperties:
                      type: string
                    example:
                      facebook: facebook.com/sunnybeach
                      instagram: instagram.com/sunnybeach
                  featuredImageUrl:
                    type: string
                    description: URL of the featured image.
                    example: https://example.com/images/sunnybeach.jpg
                  updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the spot was last updated.
                    example: 2023-10-12T07:20:50.52Z
        "400":
          description: Invalid request body.
        "500":
          description: Internal server error.
  "/v1/spots/{id}":
    get:
      tags:
        - Spots | FEATURE
      summary: Get spot by ID
      description: Retrieve details of a specific spot by its ID, with an option to
        select specific fields.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Unique identifier for the spot.
        - in: query
          name: fields
          schema:
            type: string
          description: Comma-separated list of fields to retrieve (e.g., "title,address").
          example: title,address,latitude,longitude
      responses:
        "200":
          description: Detailed information of the spot.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: Unique identifier of the spot.
                  title:
                    type: string
                    description: Title of the spot.
                    example: Beautiful Park
                  address:
                    type: string
                    description: Address of the spot.
                    example: 123 Park Ave, Cityville
                  description:
                    type: string
                    description: Full description of the spot.
                    example: A scenic park with lots of greenery and walking paths.
                  latitude:
                    type: number
                    description: Latitude of the spot.
                    example: 34.052235
                  longitude:
                    type: number
                    description: Longitude of the spot.
                    example: -118.243683
                  abstract:
                    type: string
                    description: Brief description of the spot.
                    example: A beautiful city park.
                  email:
                    type: string
                    description: Contact email for inquiries.
                    example: contact@beautifulpark.com
                  socialMediaHandles:
                    type: object
                    additionalProperties:
                      type: string
                    description: Social media handles.
                    example:
                      facebook: facebook.com/beautifulpark
                      instagram: instagram.com/beautifulpark
                  featuredImageUrl:
                    type: string
                    description: URL for the spot's featured image.
                    example: https://example.com/images/park.jpg
                  updated_at:
                    type: string
                    format: date-time
                    description: Last updated timestamp.
                    example: 2023-10-12T07:20:50.52Z
        "404":
          description: Spot not found.
        "500":
          description: Internal server error.
    patch:
      tags:
        - Spots | FEATURE
      summary: Update a specific spot by ID
      description: Modify one or more fields of a specific spot.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the spot to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Updated title of the spot.
                  example: Updated Sunny Beach
                address:
                  type: string
                  description: Updated address of the spot.
                  example: 789 New Ocean Drive, Beachtown
                description:
                  type: string
                  description: Updated detailed description of the spot.
                latitude:
                  type: number
                  description: Updated geographical latitude.
                longitude:
                  type: number
                  description: Updated geographical longitude.
                abstract:
                  type: string
                  description: Updated brief description of the spot.
      responses:
        "200":
          description: Successfully updated spot
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: ID of the updated spot.
                  title:
                    type: string
                  address:
                    type: string
                  description:
                    type: string
                  latitude:
                    type: number
                  longitude:
                    type: number
                  abstract:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
                    description: Last update timestamp.
        "400":
          description: Bad request or validation error
        "404":
          description: Spot not found
        "500":
          description: Internal server error
    delete:
      tags:
        - Spots | FEATURE
      summary: Delete a spot by ID
      description: Remove a specific spot from the database by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the spot to delete.
      responses:
        "200":
          description: Successfully deleted the spot
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: ID of the deleted spot.
                  title:
                    type: string
                  address:
                    type: string
                  description:
                    type: string
                  latitude:
                    type: number
                  longitude:
                    type: number
                  abstract:
                    type: string
        "404":
          description: Spot not found
        "500":
          description: Internal server error
  /v1/auth/login:
    post:
      tags:
        - Auth | FEATURE
      summary: Login user
      description: Authenticate user and receive access token plus refresh token cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: Pass1234
      responses:
        "200":
          description: Successfully logged in
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      handle:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum:
                          - admin
                          - business_owner
                          - gov_entity
                          - basic
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "400":
          description: Invalid credentials
        "401":
          description: Authentication failed
  /v1/auth/signup:
    post:
      tags:
        - Auth | FEATURE
      summary: Register a new user
      description: Create a new user account and receive access token plus refresh
        token cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - handle
                - email
                - password
              properties:
                handle:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: Pass1234
      responses:
        "201":
          description: User successfully created
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      handle:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum:
                          - basic
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "409":
          description: Email or handle already exists
  /v1/auth/logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - Auth | FEATURE
      summary: Logout user
      description: Logout user from current device by invalidating refresh token
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        "205":
          description: Successfully logged out
          headers:
            Set-Cookie:
              description: Clears refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "401":
          description: Unauthorized
  /v1/auth/master-logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - Auth | FEATURE
      summary: Logout from all devices
      description: Logout user from all devices by invalidating all refresh tokens
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        "205":
          description: Successfully logged out from all devices
          headers:
            Set-Cookie:
              description: Clears refresh token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "401":
          description: Unauthorized
  /v1/auth/reauth:
    post:
      tags:
        - Auth | FEATURE
      summary: Refresh access token
      description: Get a new access token using refresh token cookie
      responses:
        "201":
          description: New access token generated
          headers:
            Cache-Control:
              description: no-store
            Pragma:
              description: no-cache
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Invalid or expired refresh token
  /v1/auth/forgotpass:
    post:
      tags:
        - Auth | FEATURE
      summary: Request password reset
      description: Send password reset link to user's email with time-limited token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
      responses:
        "200":
          description: Reset link sent (returns success even if email not found for
            security)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reset link sent
                  feedback:
                    type: string
                    example: If john.doe@example.com is found with us, we've sent an email with
                      instructions to reset your password.
                  success:
                    type: boolean
                    example: true
        "500":
          description: Error sending email
  "/v1/auth/resetpass/{resetToken}":
    patch:
      tags:
        - Auth | FEATURE
      summary: Reset password
      description: Reset user password using time-limited reset token
      parameters:
        - in: path
          name: resetToken
          required: true
          schema:
            type: string
          description: Password reset token received via email (URL encoded)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - passwordConfirm
              properties:
                password:
                  type: string
                  format: password
                  example: NewPass1234
                passwordConfirm:
                  type: string
                  format: password
                  example: NewPass1234
      responses:
        "200":
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successful
                  success:
                    type: boolean
                    example: true
        "400":
          description: Invalid or expired reset token
  /v1/auth/me:
    get:
      security:
        - bearerAuth: []
      tags:
        - Auth | FEATURE
      summary: Get authenticated user profile
      description: Retrieve the profile of the currently authenticated user
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      handle:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum:
                          - admin
                          - business_owner
                          - gov_entity
                          - basic
        "401":
          description: Unauthorized
  "/v1/users/{user_id}/groups":
    get:
      summary: Fetch all groups for a specific user
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        "200":
          description: A list of groups for the user
          content:
            application/json:
              schema:
                type: array
                items: null
        "401":
          description: Unauthorized access
        "403":
          description: User does not have ownership of the groups
    post:
      summary: Create a new group for a specific user
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the group
                  example: My New Group
                description:
                  type: string
                  description: Description of the group
                  example: A group for discussing new ideas
      responses:
        "200":
          description: The newly created group
          content:
            application/json:
              ? schema
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized access
  "/v1/users/{user_id}/groups/{group_id}":
    get:
      summary: Fetch details for a specific group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
      responses:
        "200":
          description: Details of the specified group
          content:
            application/json:
              ? schema
        "401":
          description: Unauthorized access
        "404":
          description: Group not found
    delete:
      summary: Delete a specific group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
      responses:
        "204":
          description: Group successfully deleted
        "401":
          description: Unauthorized access
        "404":
          description: Group not found
  "/v1/users/{user_id}/groups/{group_id}/members":
    post:
      summary: Add a member to a group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user performing the operation
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to add to the group
      responses:
        "200":
          description: Member successfully added
          content:
            application/json:
              ? schema
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized access
        "404":
          description: Group not found
    delete:
      summary: Remove a member from a group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user performing the operation
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to remove from the group
      responses:
        "200":
          description: Member successfully removed
          content:
            application/json:
              ? schema
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized access
        "404":
          description: Group not found
  "/v1/users/{user_id}/groups/{group_id}/messages":
    get:
      summary: Fetch messages for a specific group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user performing the operation
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            description: Maximum number of messages to retrieve
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
            description: Number of messages to skip
      responses:
        "200":
          description: List of messages in the group
          content:
            application/json:
              schema:
                type: array
                items: null
        "401":
          description: Unauthorized access
        "404":
          description: Group not found
    post:
      summary: Send a message to a group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user sending the message
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Content of the message
      responses:
        "201":
          description: Message successfully created
          content:
            application/json:
              ? schema
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized access
        "404":
          description: Group not found
  "/v1/users/{user_id}/groups/{group_id}/messages/{message_id}":
    patch:
      summary: Edit a specific message in a group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user performing the operation
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: path
          name: message_id
          required: true
          schema:
            type: string
          description: ID of the message to edit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Updated content of the message
      responses:
        "200":
          description: Message successfully updated
          content:
            application/json:
              ? schema
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized access
        "404":
          description: Message not found
    delete:
      summary: Delete a specific message from a group
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user performing the operation
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: path
          name: message_id
          required: true
          schema:
            type: string
          description: ID of the message to delete
      responses:
        "204":
          description: Message successfully deleted
        "401":
          description: Unauthorized access
        "404":
          description: Message not found
  "/v1/users/{user_id}/groups/{group_id}/has-updates":
    get:
      summary: Check if a group has new messages since a given timestamp
      tags:
        - Groups | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user performing the operation
        - in: path
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: since
          required: true
          schema:
            type: number
          description: Timestamp to check for updates since
      responses:
        "200":
          description: Status of updates
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasUpdates:
                    type: boolean
                    description: Whether there are new messages
        "401":
          description: Unauthorized access
        "404":
          description: Group not found
  /v1/meetings:
    post:
      summary: Create a new meeting
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - group
                - places
                - radius
              properties:
                group:
                  type: string
                  description: Group ID
                  example: 507f1f77bcf86cd799439011
                places:
                  type: array
                  items:
                    type: object
                    properties:
                      placeId:
                        type: string
                        example: 507f1f77bcf86cd799439012
                      placeType:
                        type: string
                        enum:
                          - spot
                          - event
                        example: spot
                radius:
                  type: object
                  properties:
                    center:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - Point
                        coordinates:
                          type: array
                          items:
                            type: number
                          example:
                            - 12.4924
                            - 41.8902
                    sizeInMeters:
                      type: number
                      example: 1000
      responses:
        "201":
          description: Meeting created successfully
        "400":
          description: Invalid input
        "403":
          description: Not authorized
    get:
      summary: List meetings based on user role (admin or non-admin)
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      description: |
        Returns meetings based on user's role:
        - Admin users see all meetings in the system
        - Regular users see meetings where they are either:
          1. The creator of the meeting
          2. A member of the group the meeting belongs to
      responses:
        "200":
          description: List of meetings
        "401":
          description: Not authenticated
        "403":
          description: Not authorized
  /v1/meetings/group:
    get:
      summary: Get meetings for a specific group
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: group_id
          required: true
          schema:
            type: string
          description: ID of the group
          example: 507f1f77bcf86cd799439011
      responses:
        "200":
          description: List of meetings for the group
        "403":
          description: Not authorized
  "/v1/meetings/{meeting_id}":
    get:
      summary: Get meeting details
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: string
          description: Meeting ID
      responses:
        "200":
          description: Meeting details
        "404":
          description: Meeting not found
    delete:
      summary: Delete a meeting
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: string
          description: Meeting ID
      responses:
        "200":
          description: Meeting deleted successfully
        "403":
          description: Not authorized
        "404":
          description: Meeting not found
  "/v1/meetings/{meeting_id}/votes":
    post:
      summary: Add a vote to a meeting
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: string
          description: Meeting ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - selectedPlaces
              properties:
                selectedPlaces:
                  type: array
                  items:
                    type: string
                  example:
                    - 507f1f77bcf86cd799439012
                    - 507f1f77bcf86cd799439013
      responses:
        "200":
          description: Vote added successfully
        "400":
          description: Invalid input or meeting already finalized
        "403":
          description: Not authorized
    get:
      summary: Get all votes for a meeting
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: string
          description: Meeting ID
      responses:
        "200":
          description: List of votes
        "403":
          description: Not authorized
  "/v1/meetings/{meeting_id}/votes/remove":
    post:
      summary: Remove user's vote from a meeting
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: string
          description: Meeting ID
      responses:
        "200":
          description: Vote removed successfully
        "400":
          description: Meeting already finalized
        "403":
          description: Not authorized
        "404":
          description: Vote not found
  "/v1/meetings/{meeting_id}/finalize":
    post:
      summary: Finalize place selection for a meeting
      tags:
        - Meetings | FEATURE
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: string
          description: Meeting ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - placeId
                - placeType
              properties:
                placeId:
                  type: string
                  example: 507f1f77bcf86cd799439012
                placeType:
                  type: string
                  enum:
                    - spot
                    - event
                  example: spot
      responses:
        "200":
          description: Meeting finalized successfully
        "400":
          description: Invalid input or meeting already finalized
        "403":
          description: Not authorized
        "404":
          description: Meeting not found
  /v1/recommend:
    get:
      tags:
        - Recommendations | FEATURE
      summary: Get place recommendations based on users' coordinates
      description: Returns recommended places based on the group's location and
        preferences. Uses a centroid calculation to find the optimal meeting
        point.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coordinates
                - groupSize
                - preferences
              properties:
                coordinates:
                  type: array
                  description: Array of [longitude, latitude] coordinates for each user in the
                    group
                  items:
                    type: array
                    items:
                      type: number
                    minItems: 2
                    maxItems: 2
                  example:
                    - - 12.4924
                      - 41.8902
                    - - 12.4956
                      - 41.8919
                groupSize:
                  type: integer
                  minimum: 1
                  description: Number of people in the group
                  example: 3
                preferences:
                  type: object
                  required:
                    - maxDistance
                    - preferIndoor
                    - preferOutdoor
                    - activityType
                  properties:
                    maxDistance:
                      type: number
                      description: Maximum distance in kilometers from the centroid point
                      minimum: 0
                      example: 5
                    preferIndoor:
                      type: boolean
                      description: Preference for indoor activities
                      example: true
                    preferOutdoor:
                      type: boolean
                      description: Preference for outdoor activities
                      example: false
                    activityType:
                      type: array
                      items:
                        type: string
                        enum:
                          - cultural
                          - sports
                          - entertainment
                          - dining
                          - shopping
                      description: Types of activities preferred
                      example:
                        - cultural
                        - dining
      responses:
        "200":
          description: List of recommended places sorted by relevance score
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    place:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: Unique identifier of the place
                        title:
                          type: string
                          description: Name of the place
                        address:
                          type: string
                          description: Address of the place
                        location:
                          type: object
                          properties:
                            type:
                              type: string
                              example: Point
                            coordinates:
                              type: array
                              items:
                                type: number
                              example:
                                - 12.4924
                                - 41.8902
                        description:
                          type: string
                          description: Detailed description of the place
                        activityType:
                          type: array
                          items:
                            type: string
                          description: Types of activities available at this place
                        isIndoor:
                          type: boolean
                          description: Whether the place is indoor
                        isOutdoor:
                          type: boolean
                          description: Whether the place is outdoor
                    score:
                      type: number
                      description: Relevance score for the recommendation (0-1)
                      minimum: 0
                      maximum: 1
                      example: 0.85
                    distance:
                      type: number
                      description: Distance in kilometers from the centroid point
                      example: 2.5
        "400":
          description: Invalid request parameters
        "500":
          description: Internal server error
tags: []
